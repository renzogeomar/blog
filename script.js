

const pages = {
  inicio: `
    <h2>Bienvenido al blog de Estructura de Datos y Algoritmos</h2>
    <p>Selecciona un tema en la barra de navegaci√≥n para comenzar.</p>
  `,
  recurrencia: `
  <h2>üìò Recurrencia</h2>

  <p>
    La <strong>recurrencia</strong> es una t√©cnica utilizada en programaci√≥n para resolver problemas dividi√©ndolos en subproblemas m√°s peque√±os del mismo tipo.
    Se basa en el principio de la <strong>divisi√≥n y conquista</strong>, y se implementa principalmente mediante funciones recursivas.
  </p>

  <h3>üß† ¬øQu√© es una funci√≥n recursiva?</h3>
  <p>
    Una funci√≥n recursiva es aquella que se llama a s√≠ misma durante su ejecuci√≥n. 
    Para que la recursi√≥n no se vuelva infinita, debe tener una <strong>condici√≥n base</strong> que detenga las llamadas.
  </p>

  <h4>Ejemplo cl√°sico: Factorial</h4>
  <pre><code class="language-js">
  function factorial(n) {
    if (n === 0) return 1;       // Caso base
    return n * factorial(n - 1); // Llamada recursiva
  }
  console.log(factorial(5)); // 120
  </code></pre>

  <h3>üìê F√≥rmulas de recurrencia</h3>
  <p>
    En an√°lisis de algoritmos, la recurrencia permite expresar el tiempo de ejecuci√≥n de algoritmos recursivos. 
    Un ejemplo t√≠pico es el caso del algoritmo de ordenamiento MergeSort:
  </p>
  <p>
    <code>T(n) = 2T(n/2) + O(n)</code>  
  </p>
  <p>
    Esta f√≥rmula representa que dividimos el problema en 2 subproblemas de tama√±o <code>n/2</code> (cada uno toma T(n/2)) 
    y luego combinamos los resultados en tiempo O(n).
  </p>

  <h3>üìä M√©todo para resolver recurrencias</h3>
  <ul>
    <li><strong>Expansi√≥n o Sustituci√≥n:</strong> Expandes la f√≥rmula varias veces hasta detectar un patr√≥n.</li>
    <li><strong>√Årbol de recurrencia:</strong> Dibujas el √°rbol de llamadas recursivas y sumas los costos por nivel.</li>
    <li><strong>Teorema Maestro:</strong> Reglas que permiten resolver muchas recurrencias comunes en algoritmos "divide y vencer√°s".</li>
  </ul>

  <h3>üìå Teorema Maestro</h3>
  <p>
    Permite resolver recurrencias de la forma:
    <code>T(n) = aT(n/b) + O(n^d)</code>
  </p>
  <p>
    - Si <code>a &lt; b^d</code> ‚Üí <code>T(n) = O(n^d)</code><br>
    - Si <code>a = b^d</code> ‚Üí <code>T(n) = O(n^d log n)</code><br>
    - Si <code>a &gt; b^d</code> ‚Üí <code>T(n) = O(n^{log_b a})</code>
  </p>

  <h3>üå≥ Relaci√≥n con estructuras de √°rboles</h3>
  <p>
    La recursividad se usa naturalmente en estructuras jer√°rquicas como los <strong>√°rboles binarios</strong>.
    Cada sub√°rbol puede ser considerado como un problema m√°s peque√±o del mismo tipo.
  </p>

  <h4>Ejemplo: Recorrido en preorden</h4>
  <pre><code class="language-js">
  function preorden(nodo) {
    if (!nodo) return;
    console.log(nodo.valor);
    preorden(nodo.izquierda);
    preorden(nodo.derecha);
  }
  </code></pre>

  <h3>üìå Ejemplo visual de recursi√≥n</h3>
  <pre>
            fibonacci(4)
             /        \\
        fib(3)         fib(2)
        /   \\         /   \\
     fib(2) fib(1)  fib(1) fib(0)
     /    \\
  fib(1) fib(0)
  </pre>
  <p>
    Como puedes ver, un mismo subproblema (fib(1)) se repite muchas veces. Por eso, en estos casos es mejor usar <strong>memorizaci√≥n</strong> o programaci√≥n din√°mica.
  </p>

  <h3>üßÆ Importancia en algoritmos</h3>
  <p>La recursividad es clave para:</p>
  <ul>
    <li>Backtracking (Sudoku, N-Queens)</li>
    <li>Dividir y conquistar (MergeSort, QuickSort)</li>
    <li>Procesar estructuras jer√°rquicas (√°rboles, grafos)</li>
    <li>Algoritmos recursivos como Fibonacci, Torres de Hanoi, etc.</li>
  </ul>

  <h3>‚úÖ Ventajas y desventajas</h3>
  <ul>
    <li><strong>Ventajas:</strong> C√≥digo m√°s limpio, natural para problemas jer√°rquicos.</li>
    <li><strong>Desventajas:</strong> Consumo de memoria (stack), puede causar desbordamiento si no se controla bien.</li>
  </ul>

  <p style="margin-top: 20px;">
    La recursividad es una herramienta poderosa que, bien aplicada, permite resolver problemas de forma elegante. 
    Dominarla es clave en la programaci√≥n avanzada y estructuras de datos.
  </p>
`,
  abb: `
  <h2>üå≥ √Årbol Binario de B√∫squeda (ABB / BST)</h2>

  <p>
    Un <strong>√Årbol Binario de B√∫squeda (ABB)</strong> es una estructura de datos jer√°rquica donde cada nodo puede tener como m√°ximo dos hijos: 
    uno izquierdo y uno derecho. Es un tipo especial de √°rbol binario que mantiene sus elementos ordenados de forma que:
  </p>

  <ul>
    <li>Todo valor en el sub√°rbol izquierdo es <strong>menor</strong> que el valor del nodo.</li>
    <li>Todo valor en el sub√°rbol derecho es <strong>mayor</strong> que el valor del nodo.</li>
  </ul>

  <h3>üß± Propiedades</h3>
  <ul>
    <li>Los valores est√°n organizados para permitir b√∫squedas eficientes.</li>
    <li>Puede estar balanceado o desbalanceado (un √°rbol desbalanceado se comporta como una lista).</li>
    <li>Altura ideal: <code>O(log n)</code> en el mejor caso.</li>
  </ul>

  <h3>üîç Operaciones b√°sicas</h3>

  <h4>1. Inserci√≥n</h4>
  <p>
    Se compara el valor a insertar con el nodo actual:
    <ul>
      <li>Si es menor, se va al sub√°rbol izquierdo.</li>
      <li>Si es mayor, al derecho.</li>
    </ul>
    El proceso es recursivo hasta encontrar una posici√≥n nula donde se inserta.
  </p>

  <pre><code class="language-js">
function insertar(nodo, valor) {
  if (!nodo) return { valor, izquierda: null, derecha: null };
  if (valor < nodo.valor) {
    nodo.izquierda = insertar(nodo.izquierda, valor);
  } else {
    nodo.derecha = insertar(nodo.derecha, valor);
  }
  return nodo;
}
  </code></pre>

  <h5>üå± Ejemplo visual de inserci√≥n</h5>
  <p>Insertar el valor <strong>65</strong> en el siguiente √°rbol:</p>
  <pre>
         50
        /  \\
      30    70
     / \\   / 
   20  40  60
  </pre>
  <p>‚Üí 65 es mayor que 50 ‚Üí mayor que 70 ‚ùå ‚Üí menor que 70 ‚úÖ ‚Üí mayor que 60 ‚Üí se inserta a la derecha de 60:</p>
  <pre>
         50
        /  \\
      30    70
     / \\   / \\
   20  40  60  80
               \\
                65
  </pre>

  <h4>2. B√∫squeda</h4>
  <p>Similar a la inserci√≥n, pero se detiene cuando encuentra el valor o llega a un nodo nulo.</p>

  <pre><code class="language-js">
function buscar(nodo, valor) {
  if (!nodo || nodo.valor === valor) return nodo;
  if (valor < nodo.valor) return buscar(nodo.izquierda, valor);
  return buscar(nodo.derecha, valor);
}
  </code></pre>

  <h4>3. Eliminaci√≥n</h4>
  <p>Existen tres casos:</p>
  <ul>
    <li><strong>1. Nodo sin hijos:</strong> se elimina directamente.</li>
    <li><strong>2. Nodo con un solo hijo:</strong> se reemplaza con su hijo.</li>
    <li><strong>3. Nodo con dos hijos:</strong> se reemplaza con su <em>sucesor inorden</em> (el menor del sub√°rbol derecho).</li>
  </ul>

  <h5>ü™ì Ejemplo visual de eliminaci√≥n</h5>
  <p>Eliminar el nodo <strong>50</strong> en el √°rbol siguiente:</p>
  <pre>
         50
        /  \\
      30    70
     / \\   / \\
   20  40  60 80
  </pre>
  <p>
    El nodo 50 tiene dos hijos. Buscamos su sucesor inorden: el menor valor del sub√°rbol derecho ‚Üí <strong>60</strong>.  
    Reemplazamos 50 por 60, y eliminamos 60 del sub√°rbol derecho:
  </p>
  <pre>
         60
        /  \\
      30    70
     / \\     \\
   20  40     80
  </pre>

  <h3>üåÄ Recorridos</h3>
  <ul>
    <li><strong>Inorden (Izq-Ra√≠z-Der):</strong> entrega los valores ordenados.</li>
    <li><strong>Preorden (Ra√≠z-Izq-Der):</strong> √∫til para copiar el √°rbol.</li>
    <li><strong>Postorden (Izq-Der-Ra√≠z):</strong> usado en eliminaci√≥n de nodos.</li>
  </ul>

  <h3>‚è±Ô∏è Complejidad</h3>
  <table border="1" cellpadding="5">
    <tr>
      <th>Operaci√≥n</th>
      <th>Mejor caso</th>
      <th>Peor caso (desbalanceado)</th>
    </tr>
    <tr>
      <td>Inserci√≥n</td>
      <td>O(log n)</td>
      <td>O(n)</td>
    </tr>
    <tr>
      <td>B√∫squeda</td>
      <td>O(log n)</td>
      <td>O(n)</td>
    </tr>
    <tr>
      <td>Eliminaci√≥n</td>
      <td>O(log n)</td>
      <td>O(n)</td>
    </tr>
  </table>

  <h3>‚úÖ Aplicaciones</h3>
  <ul>
    <li>Gesti√≥n de bases de datos en memoria.</li>
    <li>√çndices de b√∫squeda r√°pida.</li>
    <li>Sistemas donde se requiera mantener el orden.</li>
  </ul>

  <h3>üß† Conclusi√≥n</h3>
  <p>
    El √Årbol Binario de B√∫squeda es una de las estructuras m√°s importantes en programaci√≥n. 
    Es la base de muchas estructuras avanzadas (como AVL, Splay y Red-Black Tree), y es fundamental comprender su funcionamiento 
    para dominar algoritmos eficientes en estructuras jer√°rquicas.
  </p>
  `,
  avl: `
  <h2>üå≤ √Årbol AVL (Adelson-Velsky y Landis)</h2>

  <p>
    Un <strong>√Årbol AVL</strong> es un <em>√°rbol binario de b√∫squeda autobalanceado</em>. 
    Fue el primer tipo de √°rbol balanceado propuesto, por Adelson-Velsky y Landis en 1962.
    La principal propiedad del √°rbol AVL es que mantiene su <strong>balance</strong> en cada inserci√≥n o eliminaci√≥n,
    garantizando una altura logar√≠tmica.
  </p>

  <h3>üìè Factor de balance</h3>
  <p>
    Se define como la diferencia de alturas entre el sub√°rbol izquierdo y el derecho:
    <code>FB = altura(izq) - altura(der)</code>.
    Un nodo est√° <strong>balanceado</strong> si su FB ‚àà { -1, 0, 1 }.
  </p>

  <h3>‚öôÔ∏è Operaciones principales</h3>

  <h4>1. Inserci√≥n</h4>
  <p>
    Igual que en un ABB, pero despu√©s de insertar, se actualizan los factores de balance
    desde la hoja hacia arriba. Si alg√∫n nodo queda desbalanceado (FB fuera del rango), se realiza una <strong>rotaci√≥n</strong>.
  </p>

  <h5>üåÄ Tipos de rotaciones</h5>
  <ul>
    <li><strong>Rotaci√≥n simple a la derecha:</strong> desbalance izquierda-izquierda (LL).</li>
    <li><strong>Rotaci√≥n simple a la izquierda:</strong> desbalance derecha-derecha (RR).</li>
    <li><strong>Rotaci√≥n doble derecha-izquierda:</strong> desbalance derecha-izquierda (RL).</li>
    <li><strong>Rotaci√≥n doble izquierda-derecha:</strong> desbalance izquierda-derecha (LR).</li>
  </ul>

  <h5>üå± Ejemplo visual: Inserci√≥n desbalance LL</h5>
  <p>Insertamos <strong>10</strong>, <strong>5</strong> y <strong>2</strong>:</p>
  <pre>
      10
     /
    5
   /
  2
  </pre>
  <p>El √°rbol se desbalancea (FB = 2). Se hace rotaci√≥n simple a la derecha:</p>
  <pre>
      5
     / \\
    2  10
  </pre>

  <h4>2. Eliminaci√≥n</h4>
  <p>
    Igual que en ABB, pero despu√©s de eliminar, se revisa si alg√∫n nodo qued√≥ desbalanceado
    y se aplican rotaciones correctivas.
  </p>

  <h5>ü™ì Ejemplo visual: Eliminaci√≥n con rebalanceo</h5>
  <p>
    √Årbol antes de eliminar 30:
  </p>
  <pre>
      40
     /  \\
   30    50
  / 
20
  </pre>
  <p>Eliminamos 30:</p>
  <pre>
      40
     /  \\
   20    50
  </pre>
  <p>FB(40) = -1 ‚Üí balanceado ‚úÖ</p>

  <h4>3. B√∫squeda</h4>
  <p>
    Igual que en ABB, se compara recursivamente. AVL garantiza b√∫squedas en <strong>O(log n)</strong>.
  </p>

  <pre><code class="language-js">
function buscarAVL(nodo, valor) {
  if (!nodo || nodo.valor === valor) return nodo;
  if (valor < nodo.valor) return buscarAVL(nodo.izquierda, valor);
  return buscarAVL(nodo.derecha, valor);
}
  </code></pre>

  <h3>‚è±Ô∏è Complejidad</h3>
  <table border="1" cellpadding="5">
    <tr>
      <th>Operaci√≥n</th>
      <th>Complejidad</th>
    </tr>
    <tr>
      <td>Inserci√≥n</td>
      <td>O(log n)</td>
    </tr>
    <tr>
      <td>Eliminaci√≥n</td>
      <td>O(log n)</td>
    </tr>
    <tr>
      <td>B√∫squeda</td>
      <td>O(log n)</td>
    </tr>
  </table>

  <h3>‚úÖ Ventajas</h3>
  <ul>
    <li>Mantiene el √°rbol balanceado autom√°ticamente.</li>
    <li>Rendimiento consistente, sin degradaci√≥n como en ABB.</li>
    <li>Ideal para estructuras donde hay muchas inserciones y b√∫squedas frecuentes.</li>
  </ul>

  <h3>üö´ Desventajas</h3>
  <ul>
    <li>Las rotaciones pueden ser costosas si hay muchas inserciones/eliminaciones.</li>
    <li>M√°s complejo de implementar que un ABB b√°sico.</li>
  </ul>

  <h3>üìö Aplicaciones</h3>
  <ul>
    <li>Gesti√≥n de bases de datos en memoria.</li>
    <li>√çndices ordenados.</li>
    <li>Compiladores y analizadores l√©xicos.</li>
  </ul>

  <h3>üìå Conclusi√≥n</h3>
  <p>
    El √°rbol AVL es una herramienta poderosa cuando se requiere mantener un alto rendimiento en estructuras din√°micas.
    Su capacidad de mantenerse balanceado lo hace ideal para casos con m√∫ltiples operaciones donde el orden importa.
  </p>
  `,
  splay: `
  <h2>üå≥ Splay Tree (√Årbol de acceso autoajustable)</h2>

  <p>
    Un <strong>Splay Tree</strong> es un <em>√°rbol binario de b√∫squeda autoajustable</em> que realiza una operaci√≥n llamada 
    <strong>splay</strong> cada vez que un nodo es accedido (b√∫squeda, inserci√≥n o eliminaci√≥n).
    Esta operaci√≥n lleva el nodo accedido hasta la ra√≠z mediante una serie de <em>rotaciones</em>,
    de forma que los nodos accedidos recientemente queden m√°s cercanos a la ra√≠z, optimizando futuros accesos.
  </p>

  <h3>üåÄ ¬øQu√© es el "Splaying"?</h3>
  <p>
    Es el proceso de llevar un nodo al tope del √°rbol usando una serie de rotaciones (zig, zig-zig, zig-zag) dependiendo de su posici√≥n relativa.
    Se busca mejorar el tiempo de acceso promedio en estructuras con patrones de acceso repetitivos.
  </p>

  <h4>üìè Tipos de rotaciones</h4>
  <ul>
    <li><strong>Zig:</strong> cuando el nodo es hijo directo de la ra√≠z.</li>
    <li><strong>Zig-Zig:</strong> el nodo y su padre est√°n en el mismo lado (izquierda-izquierda o derecha-derecha).</li>
    <li><strong>Zig-Zag:</strong> el nodo y su padre est√°n en lados opuestos.</li>
  </ul>

  <h3>‚öôÔ∏è Operaciones principales</h3>

  <h4>1. Inserci√≥n</h4>
  <p>
    Se inserta como en un ABB. Luego se aplica splay al nodo insertado para llevarlo a la ra√≠z.
  </p>

  <h5>üå± Ejemplo visual: Inserci√≥n</h5>
  <p>Insertamos 10, luego 5, luego 2:</p>
  <pre>
      10
     /
    5
   /
  2
  </pre>
  <p>Despu√©s del splay, 2 queda en la ra√≠z:</p>
  <pre>
      2
       \\
        5
         \\
         10
  </pre>

  <h4>2. B√∫squeda</h4>
  <p>
    Si el nodo existe, se sube a la ra√≠z con splaying. Si no existe, el √∫ltimo nodo visitado se sube a la ra√≠z.
  </p>

  <h4>3. Eliminaci√≥n</h4>
  <p>
    Primero se hace splay sobre el nodo a eliminar para moverlo a la ra√≠z. Luego, se eliminan sus hijos
    y se reorganiza el √°rbol combinando los sub√°rboles izquierdo y derecho.
  </p>

  <h5>ü™ì Ejemplo visual: Eliminaci√≥n</h5>
  <p>√Årbol antes de eliminar <code>5</code>:</p>
  <pre>
      10
     /
    5
   /
  2
  </pre>
  <p>Hacemos splay sobre 5:</p>
  <pre>
      5
     / \\
    2  10
  </pre>
  <p>Eliminamos 5 ‚Üí unir sub√°rboles izquierdo y derecho:</p>
  <pre>
      2
       \\
        10
  </pre>

  <h3>‚è±Ô∏è Complejidad</h3>
  <table border="1" cellpadding="5">
    <tr>
      <th>Operaci√≥n</th>
      <th>Complejidad amortizada</th>
    </tr>
    <tr>
      <td>Inserci√≥n</td>
      <td>O(log n)</td>
    </tr>
    <tr>
      <td>Eliminaci√≥n</td>
      <td>O(log n)</td>
    </tr>
    <tr>
      <td>B√∫squeda</td>
      <td>O(log n)</td>
    </tr>
  </table>

  <h3>‚úÖ Ventajas</h3>
  <ul>
    <li>Mejora el acceso a nodos que se usan frecuentemente.</li>
    <li>No necesita almacenar informaci√≥n adicional como altura o balance.</li>
    <li>F√°cil de implementar en comparaci√≥n con AVL o Red-Black Trees.</li>
  </ul>

  <h3>üö´ Desventajas</h3>
  <ul>
    <li>El peor caso puede tener complejidad O(n) si el √°rbol se degenera temporalmente.</li>
    <li>Operaciones individuales pueden ser costosas, aunque el rendimiento promedio es bueno.</li>
  </ul>

  <h3>üìö Aplicaciones</h3>
  <ul>
    <li>Gesti√≥n de cach√© (por frecuencia de acceso).</li>
    <li>Compresi√≥n adaptativa (como en algoritmos tipo move-to-front).</li>
    <li>√Årboles de b√∫squeda en estructuras de datos din√°micas.</li>
  </ul>

  <h3>üìå Conclusi√≥n</h3>
  <p>
    El Splay Tree es ideal cuando algunos elementos se acceden mucho m√°s que otros. Su comportamiento adaptativo
    lo hace eficiente para patrones de acceso no uniformes.
  </p>
  `,
  b: `
  <h2>üå≥ √Årbol B (B-Tree)</h2>

  <p>
    Un <strong>√Årbol B</strong> es una estructura de datos en forma de √°rbol balanceado multiclave. 
    Es ampliamente utilizado en sistemas de bases de datos y sistemas de archivos para permitir b√∫squedas, inserciones y eliminaciones eficientes en grandes vol√∫menes de datos almacenados en disco.
  </p>

  <h3>üîß Caracter√≠sticas</h3>
  <ul>
    <li>Cada nodo puede contener m√∫ltiples claves y tener m√∫ltiples hijos.</li>
    <li>Todos los nodos hoja est√°n en el mismo nivel.</li>
    <li>Los nodos se mantienen ordenados y balanceados autom√°ticamente.</li>
    <li>Un √Årbol B de orden <code>m</code> puede tener como m√°ximo <code>m-1</code> claves y <code>m</code> hijos por nodo.</li>
  </ul>

  <h3>üìÇ Aplicaciones</h3>
  <ul>
    <li>Sistemas de archivos (como NTFS, HFS+).</li>
    <li>Bases de datos (como PostgreSQL, MySQL InnoDB).</li>
    <li>√çndices en almacenamiento externo donde el acceso a disco es costoso.</li>
  </ul>

  <h3>‚öôÔ∏è Operaciones</h3>

  <h4>1. Inserci√≥n</h4>
  <p>
    Las claves se insertan en los nodos hoja. Si un nodo se llena (alcanza <code>m-1</code> claves), se divide
    y la clave del medio se mueve al nodo padre, garantizando que el √°rbol permanezca balanceado.
  </p>

  <h5>üå± Ejemplo visual: Inserci√≥n en un √Årbol B de orden 3</h5>
  <p>Insertamos 10, 20, 5:</p>
  <pre>
    [5 | 10 | 20]
  </pre>
  <p>Insertamos 30 ‚Üí se divide el nodo:</p>
  <pre>
        [10]
       /    \\
    [5]    [20 | 30]
  </pre>

  <h4>2. B√∫squeda</h4>
  <p>
    Se realiza una b√∫squeda binaria dentro del nodo actual y se sigue al sub√°rbol adecuado.
    Debido al n√∫mero reducido de niveles, esta operaci√≥n es muy eficiente.
  </p>

  <h4>3. Eliminaci√≥n</h4>
  <p>
    Si una clave es eliminada y el nodo queda con menos de <code>‚åà(m/2)‚åâ - 1</code> claves, 
    se realiza una fusi√≥n o redistribuci√≥n con los hermanos para mantener las reglas del √°rbol.
  </p>

  <h5>ü™ì Ejemplo visual: Eliminaci√≥n</h5>
  <p>√Årbol antes de eliminar 10:</p>
  <pre>
        [10]
       /    \\
    [5]    [20 | 30]
  </pre>
  <p>Eliminamos 10 ‚Üí se reorganiza:</p>
  <pre>
    [5 | 20 | 30]
  </pre>

  <h3>‚è±Ô∏è Complejidad</h3>
  <table border="1" cellpadding="5">
    <tr>
      <th>Operaci√≥n</th>
      <th>Tiempo</th>
    </tr>
    <tr>
      <td>B√∫squeda</td>
      <td>O(log n)</td>
    </tr>
    <tr>
      <td>Inserci√≥n</td>
      <td>O(log n)</td>
    </tr>
    <tr>
      <td>Eliminaci√≥n</td>
      <td>O(log n)</td>
    </tr>
  </table>

  <h3>‚úÖ Ventajas</h3>
  <ul>
    <li>Excelente rendimiento en acceso a disco o memoria secundaria.</li>
    <li>Balance autom√°tico sin necesidad de rotaciones.</li>
    <li>Manejo eficiente de grandes vol√∫menes de datos.</li>
  </ul>

  <h3>üö´ Desventajas</h3>
  <ul>
    <li>Complejidad en su implementaci√≥n.</li>
    <li>En memoria RAM, los √°rboles binarios balanceados pueden ser m√°s r√°pidos.</li>
  </ul>

  <h3>üìå Conclusi√≥n</h3>
  <p>
    El √Årbol B es ideal para sistemas donde el acceso a disco es costoso, 
    como bases de datos y sistemas de archivos. Su dise√±o permite minimizar
    el n√∫mero de lecturas/escrituras, manteniendo un √°rbol balanceado de forma eficiente.
  </p>
  `,
  bplus: `
  <h2>üå≥ √Årbol B+ (B-Plus Tree)</h2>

  <p>
    Un <strong>√Årbol B+</strong> es una extensi√≥n del √Årbol B, utilizado principalmente en bases de datos y sistemas de archivos. 
    A diferencia del √Årbol B, en el B+ todas las claves est√°n en las hojas y las hojas est√°n enlazadas entre s√≠ para permitir un recorrido eficiente.
  </p>

  <h3>üß¨ Diferencias clave con el √Årbol B</h3>
  <ul>
    <li>En el B+, las <strong>claves internas</strong> solo sirven como gu√≠as de b√∫squeda, no almacenan datos reales.</li>
    <li>Todas las <strong>claves reales y datos</strong> se encuentran en los nodos hoja.</li>
    <li>Las hojas est√°n <strong>enlazadas secuencialmente</strong>, facilitando el recorrido ordenado.</li>
  </ul>

  <h3>üîß Caracter√≠sticas</h3>
  <ul>
    <li>√Årbol balanceado: todas las hojas est√°n en el mismo nivel.</li>
    <li>Facilita b√∫squedas, inserciones y eliminaciones eficientes.</li>
    <li>Ideal para rangos y recorridos secuenciales.</li>
  </ul>

  <h3>‚öôÔ∏è Operaciones</h3>

  <h4>1. Inserci√≥n</h4>
  <p>
    Las claves se insertan en los nodos hoja. Si se sobrepasa el l√≠mite de claves permitido, el nodo hoja se divide.
    La clave media se promociona al nodo padre (√≠ndice) sin duplicar el dato.
  </p>

  <h5>üå± Ejemplo visual: Inserci√≥n</h5>
  <p>Insertamos 5, 10, 15 en un √°rbol de orden 3:</p>
  <pre>
    [5 | 10 | 15]  ‚Üí nodo hoja
  </pre>
  <p>Insertamos 20 ‚Üí se divide:</p>
  <pre>
      [10]
      /   \\
   [5]  [15 | 20]
  </pre>
  <p>Todos los datos est√°n en hojas. El nodo ra√≠z (10) es gu√≠a de b√∫squeda.</p>

  <h4>2. B√∫squeda</h4>
  <p>
    Se busca desde la ra√≠z hasta el nodo hoja adecuado. Luego, se hace una b√∫squeda secuencial en las hojas.
  </p>

  <h4>3. Eliminaci√≥n</h4>
  <p>
    Se elimina directamente de las hojas. Si una hoja queda por debajo del m√≠nimo, se redistribuye o se fusiona.
    Las claves gu√≠a en los nodos internos se ajustan si es necesario.
  </p>

  <h5>ü™ì Ejemplo visual: Eliminaci√≥n</h5>
  <p>Antes de eliminar 15:</p>
  <pre>
      [10]
      /   \\
   [5]  [15 | 20]
  </pre>
  <p>Eliminamos 15:</p>
  <pre>
      [10]
      /   \\
   [5]   [20]
  </pre>

  <h3>üîó Enlace entre hojas</h3>
  <p>
    Las hojas est√°n enlazadas de izquierda a derecha, facilitando operaciones como recorridos en rango y paginaci√≥n:
  </p>
  <pre>
  [5] ‚Üí [10] ‚Üí [15] ‚Üí [20]
  </pre>

  <h3>‚è±Ô∏è Complejidad</h3>
  <table border="1" cellpadding="5">
    <tr>
      <th>Operaci√≥n</th>
      <th>Tiempo</th>
    </tr>
    <tr>
      <td>B√∫squeda</td>
      <td>O(log n)</td>
    </tr>
    <tr>
      <td>Inserci√≥n</td>
      <td>O(log n)</td>
    </tr>
    <tr>
      <td>Eliminaci√≥n</td>
      <td>O(log n)</td>
    </tr>
    <tr>
      <td>Recorrido por rango</td>
      <td>O(k + log n)</td>
    </tr>
  </table>

  <h3>‚úÖ Ventajas</h3>
  <ul>
    <li>Ideal para b√∫squeda por rangos o acceso secuencial.</li>
    <li>Mayor eficiencia en consultas en bases de datos.</li>
    <li>Menor altura en comparaci√≥n al √°rbol B en ciertas implementaciones.</li>
  </ul>

  <h3>üö´ Desventajas</h3>
  <ul>
    <li>Mayor uso de espacio en nodos hoja.</li>
    <li>Implementaci√≥n ligeramente m√°s compleja que el √°rbol B.</li>
  </ul>

  <h3>üìå Conclusi√≥n</h3>
  <p>
    El √Årbol B+ mejora al √Årbol B al separar las claves gu√≠a de los datos reales y conectar las hojas.
    Esto permite operaciones r√°pidas y eficientes, especialmente √∫tiles para sistemas que manejan grandes vol√∫menes de informaci√≥n.
  </p>
  `,
  bstar: `
    <h2>√Årbol B*</h2>
    <p>Optimizaci√≥n del √°rbol B+ que redistribuye nodos antes de dividir...</p>
  `,
  fundamentos: `
    <h2>Fundamentos de Programaci√≥n</h2>
    <p>Aprender los fundamentos de programaci√≥n es clave para todo desarrollador...</p>
  `,
  arreglos: `
    <h2>Arreglos</h2>
    <p>Los arreglos son estructuras lineales que permiten almacenar m√∫ltiples elementos...</p>
  `,
  poo: `
    <h2>Programaci√≥n Orientada a Objetos</h2>
    <p>La POO permite modelar el mundo real mediante clases y objetos...</p>
  `,
  microeconomia: `
    <h2>Microeconom√≠a</h2>
    <p>La microeconom√≠a estudia el comportamiento de los agentes individuales...</p>
  `
};


const content = document.getElementById("content");
document.querySelectorAll(".navbar a[data-page]").forEach(link => {
  link.addEventListener("click", e => {
    e.preventDefault();
    const page = link.getAttribute("data-page");
    content.innerHTML = pages[page];
  });
});